配置用户信息：
git confit --global user.name "YouChaoMin"
git confit --global user.email "1330676845@qq.com"
看是否配置成功
git config user.name

新建文件夹并切入:
mkdir git-learn
cd git-learn
查看创建的文件目录
pwd

创建仓库:
git init

新建readme.txt
echo "helllo world">>readme.txt

查看当前状态:
git status

添加全部修改到暂存区并提交:
git add -A             /*windows使用git时出现：warning: LF will be replaced by CRLF
                         windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法：
                         $ rm -rf .git  // 删除.git  
                         $ git config --global core.autocrlf false  //禁用自动转换
                         然后重新执行：
                         $ git init    
                         $ git add   */
git commit -m"add readme.txt"
gitk

添加github远程库并推送文件
git remote add origin https://github.com/XX/XX
git push -u origin master
/*fatal: HttpRequestException encountered.
   ▒▒▒▒▒▒▒▒ʱ▒▒▒▒
fatal: HttpRequestException encountered.
   ▒▒▒▒▒▒▒▒ʱ▒▒▒▒
Username for 'https://github.com': YouChaoMin
Counting objects: 3, done.
Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/YouChaoMin/git-learn.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
*/                        //成功提交后显示

在github上的项目clone到本地文件
git clone http://github.com/XX/XX
/*
$ git clone https://github.com/YouChaoMin/9GAG
Cloning into '9GAG'...
remote: Counting objects: 1199, done.
remote: Total 1199 (delta 0), reused 0 (delta 0), pack-reused 1199
Receiving objects: 100% (1199/1199), 8.00 MiB | 150.00 KiB/s, done.
Resolving deltas: 100% (560/560), done.
*/
  
版本回退
通过git reset HEAD^^可以回退到上一个版本
通过git reset HEAD^可以回退到上上个版本
通过git reset a234b3可以回退到版本号为a234b3的版本
git命令的选项如下：
git reset --hard HEAD^ 修改版本库，修改暂存区，修改工作区
git reset --mixed HEAD^ 修改版本库，修改暂存区，保留工作区(默认)
git reset --soft HEAD^ 修改版本库，保留暂存区，保留工作区

YCM@LAPTOP-ST1UV1CB MINGW64 ~
$ cd git-learn

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ pwd
/c/Users/YCM/git-learn

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "Hello China">>readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "Hello China">>read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ pycat read.txt
bash: pycat: command not found

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git commit -a -m"Hello China"
[master 056e3ec] Hello China
 1 file changed, 1 insertion(+)

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "Hello Fujian">>read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git add -A

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git commit -a -m"Hello Fujian"
[master 1618fd2] Hello Fujian
 2 files changed, 2 insertions(+)
 create mode 100644 readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log
commit 1618fd28ca91faca07425ddaf3fa5534b567bea2 (HEAD -> master)
Author: YouChaoMin <1330676845@qq.com>
Date:   Thu Apr 12 01:11:28 2018 +0800

    Hello Fujian

commit 056e3ec9ab5e1e26189f61230981119a22cb2477
Author: YouChaoMin <1330676845@qq.com>
Date:   Thu Apr 12 01:09:55 2018 +0800

    Hello China

commit 617761716aca057c73e42fff64421c7d862f801c (origin/master)
Author: YouChaoMin <1330676845@qq.com>
Date:   Tue Apr 10 11:08:28 2018 +0800

    add readme.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git reset --hard HEAD^
HEAD is now at 6177617 add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log
commit 617761716aca057c73e42fff64421c7d862f801c (HEAD -> master, origin/master)
Author: YouChaoMin <1330676845@qq.com>
Date:   Tue Apr 10 11:08:28 2018 +0800

    add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log --oneline --graph
* 6177617 (HEAD -> master, origin/master) add readme.txt

版本前进
可以用git reflog查看该版本的commit id进而根据版本号进行恢复git reset --hard xxxxx
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git reflog
6177617 (HEAD -> master, origin/master) HEAD@{0}: reset: moving to HEAD^
056e3ec HEAD@{1}: reset: moving to HEAD^
1618fd2 HEAD@{2}: commit: Hello Fujian
056e3ec HEAD@{3}: commit: Hello China
6177617 (HEAD -> master, origin/master) HEAD@{4}: commit (initial): add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git reset --hard 1618fd2
HEAD is now at 1618fd2 Hello Fujian

撤销修改：
需要撤销工作区的修改，使用git checkout --filename,如果文件之前已经添加到暂存区，则会用暂存区内容覆盖，如果暂存区已经被commit过了，则会用HEAD指向
的版本覆盖。
git checkout --filename命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令。
如果文件已经add过了，但不想用暂存区而想用版本库中的最新版本文件覆盖工作区文件，
那么类似于一个版本回退，可以用git reset --hard HEAD。

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "H">>read.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git add -A
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "%^&^%^">read.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git checkout -- read.txt             //回到160之后状态，即撤销了164操作

删除文件
删除文件也是一种修改，git跟踪的是修改而非文件。因此删除文件可以直接在工作区手动删除文件，然后add -A再commit即可。对于已经提交过的文件，也可以用
git rm newfile.txt直接删除工作区和暂存区文件，然后再commit

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo 'delete me'>>newfile.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git add -A

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git commit -m"add a newfile"
[master 920a6c4] add a newfile
 2 files changed, 2 insertions(+)
 create mode 100644 newfile.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git rm newfile.txt
rm 'newfile.txt'         //即删除了newfile.txt

比较文件
git diff可以比较不同版本库的同名文件

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "Hello Java">>read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git  diff read.txt
diff --git a/read.txt b/read.txt
index e8c71fe..5d9f12e 100644
--- a/read.txt
+++ b/read.txt
@@ -3,3 +3,4 @@ Hello China
 Hello Fujian
 HEOO
 H
+Hello Java
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git add read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git diff HEAD read.txt
diff --git a/read.txt b/read.txt
index e8c71fe..5d9f12e 100644
--- a/read.txt
+++ b/read.txt
@@ -3,3 +3,4 @@ Hello China
 Hello Fujian
 HEOO
 H
+Hello Java

添加远程:
通常可以用SSH协议和远程库通信或使用http协议和远程库通信。
http协议较为方便，但SSH协议方式速度较快。
ssh-keygen -t rsa -C"1330676845@qq.com"
在git bash中运行上述命令，并一路回车，在用户主目录里找到.ssh目录。
目录下的id_rsa有私钥，不能泄露出去。里面的id_rsa.pub是公钥，可分享给别人。
在GitHub————>settings————>SSH Keys页面添加SSH公钥。
ssh -T git@github.com
再在git bash中运行上述命令，使得本机和github建立SSH连接

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ ssh-keygen -t rsa -C"1330676845@qq.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/YCM/.ssh/id_rsa):
Created directory '/c/Users/YCM/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/YCM/.ssh/id_rsa.
Your public key has been saved in /c/Users/YCM/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:L4vrlGwp4Fv7pCiMS3+JJHZrgzV2AFkl4/jyBAf7Oao 1330676845@qq.com
The key's randomart image is:
+---[RSA 2048]----+
| .o+..           |
| o= o            |
| +.o             |
|  =..            |
| ..*.   S        |
| +=B.o o .       |
|+oO.B O . .      |
|=o.O X . o       |
|Eo+.=o=..        |
+----[SHA256]-----+
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ ssh -T git@github.com
The authenticity of host 'github.com (13.250.177.223)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.
Hi YouChaoMin! You've successfully authenticated, but GitHub does not provide shell access.

可以使用SSH地址添加远程库
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git remote add github git@github.com:YouChaoMin/git-learn.git
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git remote -v
github  git@github.com:YouChaoMin/git-learn.git (fetch)
github  git@github.com:YouChaoMin/git-learn.git (push)
orgin   https://github.com/YouChaoMin/git-learn (fetch)
orgin   https://github.com/YouChaoMin/git-learn (push)
origin  https://github.com/YouChaoMin/git-learn.git (fetch)
origin  https://github.com/YouChaoMin/git-learn.git (push)
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git remote remove origin

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git remote
github
orgin
//不是很懂

推送远程:
使用git push命令将当前仓库内容推送至远程仓库//不懂

克隆远程
git clone可以将远程仓库克隆至本地某一目录，相当于下载。不指定仓库时，会克隆到当前目录下的一个文件夹。通常在github中把
感兴趣的别人的项目fork到自己的仓库里，然后再使用clone方法下载到本地进行编辑。
git clone http://github.com/xxx/xxx
通常用./表示当前目录，../表示当前目录的父目录

更新远程:
fetch能够获取远程仓库的更新，但不同步到本地仓库。fetch获取到的是修改，不会获取文件，而clone会获取文件。可以在fetch之后
利用merge，rebase等方法合并并同步到本地。
在git-learn项目下新建一个test.txt文件并commit 
git fetch github master
git merge github/master         //把github中新加的test.txt更新到本地

合并远程:
git pull能够获取远程仓库的更新，并同步合并到本地
相当于git fetch之后再merge。有时候会有冲突，需要解决。
你可以在GitHub网站上的通过fork一些开源项目的代码，然后clone到本地后，尝试完善项目，再发送pull request到项目发
起人，如果项目发起人通过了你的请求，那么你就为开源项目做出了贡献。
在github中的对应git-learn的read.txt的最后一行加上"remote line"并commit，在本地的git-learn的read.txt的最后
一行加上"local line"并commit，则会发生冲突。
echo "local line">>read.txt
git add -A
git commit -m"update local"
git pull github master
尝试git pull，但是出现了冲突，在本地文件打开read.txt根据指引解决冲突。
解决冲突后add,commit,push即可
git add -A
git commit -m"solve conflict"
git push

分支创建:
通常在团队协作时经常需要使用分支功能。开发时大家在不同的分支上工作，互不冲突。
到一定开发阶段再使用分支合并功能综合大家的工作结果。
默认的分支为master，可以用git branch develop在当前位置创建分支。
·master：主分支，主要用来版本发布。
·develop：日常开发分支，该分支正常保存了开发的最新代码。
·feature：具体的功能开发分支，只与develop分支交互
·release：release分支可以认为是master分支的未测试版。比如说某一期的功能全部开发完成，那么就将develop分支
          合并到release分支，测试没有问题并且到了发布日期就合并到master分支，进行发布。
·hotfix：线上bug修复分支。
#创建和删除分支
git --all
#在当前head位置创建分支develop
git branch develop
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch develop

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git log --oneline --graph --all
* 5d75293 (github/master) Create test.txt
| * d64d235 (HEAD -> master, develop) Hello Hello
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt
#在某个commit id号位置创建分支feature
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch feature 1618fd2
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch
  develop
  feature
* master
#查看包括远程同步仓库的所有分支
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch -a
  develop
  feature
* master
  remotes/github/master
  remotes/ycm/master
#删除分支feature
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch -d feature
Deleted branch feature (was 1618fd2).
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git branch
  develop
* master     //*表示处于当前分支

分支切换:
使用git checkout develop可以从当前分支切换到develop分支。
使用git checkout -b feature可以在当前HEAD位置创建新分支feature并将HEAD切换到新分支。
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git checkout develop
Switched to branch 'develop'
A       test.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ git checkout -b feature 1618fd2
Switched to a new branch 'feature'
A       test.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (feature)
$ git checkout master
Switched to branch 'master'
A       test.txt
Your branch and 'github/master' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

分支合并：
merge方法可以将两个有共同祖先节点的不同分支进行合并。
如果其中一个分支完全领先于另外一个分支，那么默认会采用fast forward合并方式，不会产生新的节点。
如果两个分支在分叉后各自有新的commit，那么会是一种三方合并方式，会产生新的节点。
第二种情况下可能需要解决冲突。
使用no-ff模式可以保留被合并分支的所有信息。
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log --oneline --graph --all
* 968c32a (HEAD -> master, origin/master) add read.txt
* 135cd1a Hello Hello
* 5d75293 (github/master) Create test.txt
| * d64d235 (develop) Hello Hello
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log --oneline --graph --all
* 968c32a (HEAD -> master, origin/master) add read.txt
* 135cd1a Hello Hello
* 5d75293 (github/master) Create test.txt
| * d64d235 (develop) Hello Hello
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ gitk --all

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ echo "writen by master branch">>read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git add -A

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git commit -m"master branch"
[master d8579e4] master branch
 1 file changed, 1 insertion(+), 1 deletion(-)

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git checkout develop
Switched to branch 'develop'

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ echo "writen by develop branch">>read.txt
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ git commit -am"develop branch"
[develop 75137d8] develop branch
 1 file changed, 1 insertion(+)

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ gitk --all

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ git log --oneline --graph --all
* 75137d8 (HEAD -> develop) develop branch
* d64d235 Hello Hello
| * d8579e4 (master) master branch
| * 968c32a (origin/master) add read.txt
| * 135cd1a Hello Hello
| * 5d75293 (github/master) Create test.txt
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (develop)
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git merge develop
Auto-merging read.txt
CONFLICT (content): Merge conflict in read.txt
Automatic merge failed; fix conflicts and then commit the result.

read.txt里显示：
hello world
Hello China
Hello Fujian
HEOO
H
Hello Java
Hello Hello
<<<<<<< HEAD
hhhhhwriten by master branch
=======
writen by develop branch
>>>>>>> develop
解决冲突后重新提交
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git add -A

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|MERGING)
$ git commit -m"merged"
[master 4885e96] merged

分支重演：
除了使用merge方法整合不同分支的内容外，分支重演rebase也是一种整合不同分支内容的方法。
git rebase origin实际上是以origin位置为新的base，逐个重演当前分支的每个节点。
在rebase的过程中，也许会出现冲突（conflict）。
在这种情况，Git会停止rebase并让你去解决冲突。
在解决完冲突后，用“git add”命令去更新这些内容。
然后，你无需执行“git commit”，只要执行：
git rebase --continue
这样git会继续重演其余节点。
在任何时候，你可以用如下命令来终止rebase的行动并恢复到rebase之前状态：
git rebase --abort

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log --oneline --graph --all
*   4885e96 (HEAD -> master) merged
|\
| * 75137d8 (develop) develop branch
| * d64d235 Hello Hello
* | d8579e4 master branch
* | 968c32a (origin/master) add read.txt
* | 135cd1a Hello Hello
* | 5d75293 (github/master) Create test.txt
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git reset --hard d8579e4
HEAD is now at d8579e4 master branch

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git log --oneline --graph --all
* 75137d8 (develop) develop branch
* d64d235 Hello Hello
| * d8579e4 (HEAD -> master) master branch
| * 968c32a (origin/master) add read.txt
| * 135cd1a Hello Hello
| * 5d75293 (github/master) Create test.txt
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git branch
  develop
  feature
* master
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master)
$ git rebase develop
First, rewinding head to replay your work on top of it...
Applying: Create test.txt
Applying: add read.txt
error: Failed to merge in the changes.
Using index info to reconstruct a base tree...
M       read.txt
Falling back to patching base and 3-way merge...
Auto-merging read.txt
CONFLICT (content): Merge conflict in read.txt
Patch failed at 0002 add read.txt
The copy of the patch that failed is found in: .git/rebase-apply/patch

Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|REBASE 2/3)
$ git add read.txt

YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|REBASE 2/3)
$ git rebase --continue
Applying: add read.txt
Applying: master branch
error: Failed to merge in the changes.
Using index info to reconstruct a base tree...
M       read.txt
Falling back to patching base and 3-way merge...
Auto-merging read.txt
CONFLICT (content): Merge conflict in read.txt
Patch failed at 0003 master branch
The copy of the patch that failed is found in: .git/rebase-apply/patch

Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
YCM@LAPTOP-ST1UV1CB MINGW64 ~/git-learn (master|REBASE 3/3)
$ git log --oneline --graph --all
* 8d49f0a (HEAD) add read.txt
* 6701650 Create test.txt
* 75137d8 (develop) develop branch
* d64d235 Hello Hello
| * d8579e4 (master) master branch
| * 968c32a (origin/master) add read.txt
| * 135cd1a Hello Hello
| * 5d75293 (github/master) Create test.txt
|/
* 920a6c4 (ycm/master) add a newfile
* e49fa25 add 2333
* cedd4a3 add read.txt
* 1618fd2 (feature) Hello Fujian
* 056e3ec Hello China
* 6177617 add readme.txt

储藏管理：
如果工作只进行到一半，还没法提交。
但出现了一个着急的事情需要马上切换去解决，例如修复一个临时bug。
有没有什么办法呢？
Git提供的stash功能非常适用于这种需要现场保存的情境。
把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
stash非常像是一种特殊的分支。

echo "not done">>read.txt
git stash
git stash list
git checkout develop
echo "fix a simple bug">>read.txt
git commit -am"fix bug 01"
git checkout master
git stash pop   //弹出
gitk --all
echo "done 50%">>read.txt
git stash save "50% done"
git stash list
echo "done 75%">>read.txt
git stash save "75% done"
git stash list
git satash apply 0
git stash list  
git stash drop 0 //删除

标签管理：
用标签记录版本号会更加方便协作管理。
如果团队间按如下方式沟通将很麻烦：
“请把上周一的那个版本打包发布，commit号是6a5819e“
而有了版本号将会方便许多
“请把上周一的那个版本打包发布，版本号是v1.2”
标签和分支很像，都是指向commit id 的指针，但标签不能移动而分支能够移动。
#当前head位置打上v2.0标签
git tag v2.0
#在commit id为4e30082位置打上v1.0标签
#查看全部标签
git tag
#查看标签对应版本号等信息
git show v1.0

git push github master
#推送标签到远程
git push github v2.0
#删除标签
git tag -d v1.0
#删除远程标签
git push github :refs/tags/v1.0
git log --oneline --graph --all
gitk --all